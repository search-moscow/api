#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs');
var app = require('../app');
var debug = require('debug')('search-moscow:server');
var https = require('https');


var privateKey
var certificate

if (process.env.NODE_ENV == 'production') {
  privateKey  = fs.readFileSync('./ssl/production/search.moscow.key', 'utf8');
  certificate = fs.readFileSync('./ssl/production/search.moscow.crt', 'utf8');
} else {
  privateKey  = fs.readFileSync('./ssl/development/key.pem', 'utf8');
  certificate = fs.readFileSync('./ssl/development/cert.pem', 'utf8');
}

var credentials = {key: privateKey, cert: certificate};
const WebSocket = require('ws');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer(credentials, app);

/**
 * Create WebSocket server.
 */
// Simple server
const wss = new WebSocket.Server({ server });
 
wss.on('connection', function connection(ws) {
  console.log('user connect')
  ws.on('message', function incoming(message) {
    console.log('received: %s', message);
  });
  
  ws.send(formatAMPM(new Date()));

  setInterval(function timeout() {
    ws.send(formatAMPM(new Date()));
  }, 1000);

});


function formatAMPM(date) {

    var hours = date.getHours().toLocaleString('en-AU', { timeZone: 'Europe/Moscow' });
    var minutes = date.getMinutes().toLocaleString('en-AU', { timeZone: 'Europe/Moscow' });
    var ampm = hours >= 12 ? 'pm' : 'am';
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? '0'+minutes : minutes;
    var strTime = hours + ':' + minutes + ' ' + ampm;
    return strTime;
  }

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
